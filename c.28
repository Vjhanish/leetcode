/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 // Finx all of last node in every branch
 // 2 arr to storge 
 // compar fun. return true if the same. 

#define MAX(a,b) a>b ? a:b

int FinxNode(struct TreeNode* root, int* arr, int* idx) {

    if (root == NULL) {
        return 0;
    }

    int rlen = 0, llen = 0;

    llen = FinxNode(root->left, arr, idx);
    rlen = FinxNode(root->right, arr, idx);

    if ((root->left == NULL) && (root->right == NULL)) {
        arr[*idx] = root->val;
        (*idx)++;
    }
    return 1+MAX(rlen,llen);
}
int IstheSameArr(int* arr1, int* arr2, int cnt) {
    for (int i = 0; i < cnt; i++){
        if  ( arr1[i] != arr2[i]) {
            return false;
        }
    }
    return true;
}

bool leafSimilar(struct TreeNode* root1, struct TreeNode* root2) {
    int idx1 = 0;
    int idx2 = 0;
    int* arr1 = malloc(sizeof(int) * 200);
    int* arr2 = malloc(sizeof(int) * 200);

    int totalCnt1 = FinxNode(root1, arr1, &idx1);
    int totalCnt2 = FinxNode(root2, arr2, &idx2);
    if (idx1 == idx2) return IstheSameArr(arr1, arr2, idx1);
    return false;
}
