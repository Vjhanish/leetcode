// calculate the size of answer
int search(char* s, int* idx, int len)
{
    int value = 0;
    int scale = 0;
    while((*idx) < len)
    {
        if((int)(s[(*idx)] - '0') >= 0 && (int)(s[(*idx)] - '0') <= 9)
        {
            scale = scale * 10 + (int)(s[(*idx)] - '0');
            (*idx)++;
        }
        else if(s[(*idx)] == '[')
        {
            (*idx)++;
            value += scale * search(s, idx, len);
            scale = 0;
        }
        else if(s[(*idx)] == ']')
        {
            (*idx)++;
            return value;
        }
        else
        {
            value++;
            (*idx)++;
        }
    }
    return value;
}

// make the ans
int makeans(char* s, int* idx, int len, char* ans, int* idxAns)
{
    int value = 0;
    int scale = 0;
    while((*idx) < len)
    {
        if((int)(s[(*idx)] - '0') >= 0 && (int)(s[(*idx)] - '0') <= 9)
        {
            scale = scale * 10 + (int)(s[(*idx)] - '0');
            (*idx)++;
        }
        else if(s[(*idx)] == '[')
        {
            (*idx)++;
            int v = makeans(s, idx, len, ans, idxAns);
            for(int i=1; i<scale; i++)
            {
                memcpy(ans+(*idxAns), ans+(*idxAns)-v, v);
                (*idxAns) += v;
            }
            value += scale * v;
            scale = 0;
        }
        else if(s[*(idx)] == ']')
        {
            (*idx)++;
            return value;
        }
        else
        {
            ans[(*idxAns)] = s[(*idx)];
            value++;
            (*idx)++;
            (*idxAns)++;
        }
    }
    return value;
}

char* decodeString(char* s) {
    int idx = 0;
    int len = strlen(s);
    int size = search(s, &idx, len);
    char* ans = (char*)malloc(sizeof(char) * (size+1));

    idx = 0;
    int idxAns = 0;

    makeans(s, &idx, strlen(s), ans, &idxAns);
    ans[size] = '\0';
    return ans;
}
